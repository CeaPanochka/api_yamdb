============================= test session starts =============================
platform win32 -- Python 3.7.0, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- e:\dev\s_10_project\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: E:\Dev\s_10_project\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated FAILED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated FAILED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted FAILED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator FAILED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin FAILED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user FAILED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator FAILED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete FAILED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user FAILED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator FAILED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
____________ Test00UserRegistration.test_00_valid_data_user_signup ____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x05CA1BB0>
client = <django.test.client.Client object at 0x05D42BD0>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_user_signup(self, client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=valid_data)
        outbox_after = mail.outbox  # email outbox after user create
    
        assert response.status_code != 404, (
            f'—траница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 200
        assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными '
            f'создаетс€ пользователь и возвращаетс€ статус {code}'
        )
        assert response.json() == valid_data, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными '
            f'создаетс€ пользователь и возвращаетс€ статус {code}'
        )
    
        new_user = User.objects.filter(email=valid_email)
        assert new_user.exists(), (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными '
            f'создаетс€ пользователь и возвращаетс€ статус {code}'
        )
    
        # Test confirmation code
        assert len(outbox_after) == outbox_before_count + 1, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными, '
            f'пользователю приходит email с кодом подтверждени€'
        )
>       assert valid_email in outbox_after[0].to, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` с валидными данными, '
            f'пользователю приходит письмо с кодом подтверждени€ на email, который он указал при регистрации'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` с валидными данными, пользователю приходит письмо с кодом подтверждени€ на email, который он указал при регистрации
E       assert 'valid@yamdb.fake' in [<module 'email' from 'C:\\Program Files (x86)\\Python37-32\\lib\\email\\__init__.py'>]
E        +  where [<module 'email' from 'C:\\Program Files (x86)\\Python37-32\\lib\\email\\__init__.py'>] = <django.core.mail.message.EmailMultiAlternatives object at 0x05D556B0>.to

tests\test_00_user_registration.py:115: AssertionError
_________ Test00UserRegistration.test_00_valid_data_admin_create_user _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x05F76190>
admin_client = <rest_framework.test.APIClient object at 0x05D553B0>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_admin_create_user(self, admin_client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = admin_client.post(self.url_admin_create_user, data=valid_data)
        outbox_after = mail.outbox
    
        assert response.status_code != 404, (
            f'—траница `{self.url_admin_create_user}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 201
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_admin_create_user}` с валидными данными '
            f'от имени администратора, создаетс€ пользователь и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` с валидными данными от имени администратора, создаетс€ пользователь и возвращаетс€ статус 201
E       assert 403 == 201
E         +403
E         -201

tests\test_00_user_registration.py:142: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019300, 'iat': 1663019000, 'jti': '49412e365b994bb89cfd31fc011bcc07', 'user_id': 2}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <QueryDict: {}>, key = 'username'

    def __getitem__(self, key):
        """
        Return the last data value for this key, or [] if it's an empty list;
        raise KeyError if not found.
        """
        try:
>           list_ = super().__getitem__(key)
E           KeyError: 'username'

..\venv\lib\site-packages\django\utils\datastructures.py:78: KeyError

During handling of the above exception, another exception occurred:

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x05D39430>
client = <django.test.client.Client object at 0x05E17BB0>

    @pytest.mark.django_db(transaction=True)
    def test_00_obtain_jwt_token_invalid_data(self, client):
    
        request_type = 'POST'
>       response = client.post(self.url_token)

tests\test_00_user_registration.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\django\test\client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:357: in post
    secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
api_yamdb\api\views.py:47: in post
    user = get_object_or_404(User, username=request.data['username'])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QueryDict: {}>, key = 'username'

    def __getitem__(self, key):
        """
        Return the last data value for this key, or [] if it's an empty list;
        raise KeyError if not found.
        """
        try:
            list_ = super().__getitem__(key)
        except KeyError:
>           raise MultiValueDictKeyError(key)
E           django.utils.datastructures.MultiValueDictKeyError: 'username'

..\venv\lib\site-packages\django\utils\datastructures.py:80: MultiValueDictKeyError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/auth/token/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\utils\datastructures.py", line 78, in __getitem__
    list_ = super().__getitem__(key)
KeyError: 'username'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "E:\Dev\s_10_project\api_yamdb\api_yamdb\api\views.py", line 47, in post
    user = get_object_or_404(User, username=request.data['username'])
  File "e:\dev\s_10_project\venv\lib\site-packages\django\utils\datastructures.py", line 80, in __getitem__
    raise MultiValueDictKeyError(key)
django.utils.datastructures.MultiValueDictKeyError: 'username'
______ Test00UserRegistration.test_00_registration_same_email_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x0606A950>
client = <django.test.client.Client object at 0x0607FCB0>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 200
        assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` '
            f'можно создать пользовател€ с валидными данными и возвращаетс€ статус {code}'
        )
    
        duplicate_email_data = {
            'email': valid_email_1,
            'username': valid_username_2
        }
        response = client.post(self.url_signup, data=duplicate_email_data)
        code = 400
>       assert response.status_code == code, (
            f'ѕроверьте, что при {request_type} запросе `{self.url_signup}` нельз€ создать '
            f'пользовател€, email которого уже зарегистрирован и возвращаетс€ статус {code}'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/auth/signup/` нельз€ создать пользовател€, email которого уже зарегистрирован и возвращаетс€ статус 400
E       assert 200 == 400
E         +200
E         -400

tests\test_00_user_registration.py:269: AssertionError
________________ Test01UserAPI.test_01_users_not_authenticated ________________

self = <tests.test_01_users.Test01UserAPI object at 0x06141130>
client = <django.test.client.Client object at 0x06132450>

    @pytest.mark.django_db(transaction=True)
    def test_01_users_not_authenticated(self, client):
        response = client.get('/api/v1/users/')
    
        assert response.status_code != 404, (
            '—траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
    
>       assert response.status_code == 401, (
            'ѕроверьте, что при GET запросе `/api/v1/users/` без токена авторизации возвращаетс€ статус 401'
        )
E       AssertionError: ѕроверьте, что при GET запросе `/api/v1/users/` без токена авторизации возвращаетс€ статус 401
E       assert 403 == 401
E         +403
E         -401

tests\test_01_users.py:17: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
___________ Test01UserAPI.test_02_users_username_not_authenticated ____________

self = <tests.test_01_users.Test01UserAPI object at 0x06039990>
client = <django.test.client.Client object at 0x06132C30>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_users_username_not_authenticated(self, client, admin):
>       response = client.get(f'/api/v1/users/{admin.username}/')

tests\test_01_users.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\django\test\client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:347: in get
    **extra,
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:282: in get
    return self.retrieve(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:54: in retrieve
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x06028C10>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestAdmin/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 282, in get
    return self.retrieve(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 54, in retrieve
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
______________ Test01UserAPI.test_03_users_me_not_authenticated _______________

self = <tests.test_01_users.Test01UserAPI object at 0x0588BE90>
client = <django.test.client.Client object at 0x059AF950>

    @pytest.mark.django_db(transaction=True)
    def test_03_users_me_not_authenticated(self, client):
>       response = client.get('/api/v1/users/me/')

tests\test_01_users.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\django\test\client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:347: in get
    **extra,
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:282: in get
    return self.retrieve(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:54: in retrieve
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x058F50F0>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/me/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 282, in get
    return self.retrieve(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 54, in retrieve
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
____________________ Test01UserAPI.test_04_users_get_admin ____________________

self = <tests.test_01_users.Test01UserAPI object at 0x0588BDD0>
admin_client = <rest_framework.test.APIClient object at 0x05FBBF50>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
        assert response.status_code != 404, (
            '—траница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
>       assert response.status_code == 200, (
            'ѕроверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращаетс€ статус 200'
        )
E       AssertionError: ѕроверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращаетс€ статус 200
E       assert 403 == 200
E         +403
E         -200

tests\test_01_users.py:51: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019301, 'iat': 1663019001, 'jti': '63898d9e892d48e4a42fccdde66e0652', 'user_id': 6}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search __________________

self = <tests.test_01_users.Test01UserAPI object at 0x05AF2A10>
admin_client = <rest_framework.test.APIClient object at 0x05B46FF0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
        assert response.status_code != 404, (
            '—траница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*'
        )
        reponse_json = response.json()
>       assert 'results' in reponse_json and isinstance(reponse_json.get('results'), list), (
            'ѕроверьте, что при GET запросе `/api/v1/users/?search={username}` '
            'результаты возвращаютс€ под ключом `results` и в виде списка.'
        )
E       AssertionError: ѕроверьте, что при GET запросе `/api/v1/users/?search={username}` результаты возвращаютс€ под ключом `results` и в виде списка.
E       assert ('results' in {'detail': 'You do not have permission to perform this action.'})

tests\test_01_users.py:97: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019302, 'iat': 1663019002, 'jti': '1a8bd8b0599b4ae3a4e7b9bbdccf6373', 'user_id': 7}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_05_01_users_post_admin __________________

self = <tests.test_01_users.Test01UserAPI object at 0x05942830>
admin_client = <rest_framework.test.APIClient object at 0x05A33990>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
>       assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400
E       assert 403 == 400
E         +403
E         -400

tests\test_01_users.py:135: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019302, 'iat': 1663019002, 'jti': '82ca3a06898c495f817024fcae0891d2', 'user_id': 9}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_05_02_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x05AD0730>
user_superuser_client = <rest_framework.test.APIClient object at 0x05A1DA10>

    @pytest.mark.django_db(transaction=True)
    def test_05_02_users_post_user_superuser(self, user_superuser_client):
        users = get_user_model().objects.all()
        users_before = users.count()
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post('/api/v1/users/', data=valid_data)
        assert response.status_code == 201, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, '
            'с правильными данными, возвращаете статус 201.'
        )
        users_after = users.count()
>       assert users_after == users_before + 1, (
            'ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, '
            'с правильными данными, создаетс€ пользователь.'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/users/` от суперпользовател€, с правильными данными, создаетс€ пользователь.
E       assert 1 == 2
E         +1
E         -2

tests\test_01_users.py:265: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019302, 'iat': 1663019002, 'jti': '8783be72df2f4786812965f4878173d4', 'user_id': 10}
_______________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x05A1DF70>
admin_client = <rest_framework.test.APIClient object at 0x05D55350>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019303, 'iat': 1663019003, 'jti': '815a6cee621142c785afcd3565e1f79c', 'user_id': 11}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_06_users_username_get_not_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x059414B0>
moderator_client = <rest_framework.test.APIClient object at 0x0591ACF0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_not_admin(self, moderator_client, admin):
>       response = moderator_client.get(f'/api/v1/users/{admin.username}/')

tests\test_01_users.py:314: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:288: in get
    response = super().get(path, data=data, **extra)
..\venv\lib\site-packages\rest_framework\test.py:205: in get
    return self.generic('GET', path, **r)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:282: in get
    return self.retrieve(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:54: in retrieve
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x0598B5B0>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019303, 'iat': 1663019003, 'jti': '0469f233f6314eba82d0b23b3fc473e5', 'user_id': 12}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestAdmin/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 282, in get
    return self.retrieve(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 54, in retrieve
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
_____________ Test01UserAPI.test_07_01_users_username_patch_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x05A5CC30>
admin_client = <rest_framework.test.APIClient object at 0x0602FA10>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_07_01_users_username_patch_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019303, 'iat': 1663019003, 'jti': '947c4d09bf664b68a7803a4e2e0f3be7', 'user_id': 14}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
___________ Test01UserAPI.test_07_02_users_username_patch_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x0606A8D0>
moderator_client = <rest_framework.test.APIClient object at 0x060390B0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_02_users_username_patch_moderator(self, moderator_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
>       response = moderator_client.patch(f'/api/v1/users/{user.username}/', data=data)

tests\test_01_users.py:363: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:312: in patch
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:217: in patch
    return self.generic('PATCH', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:288: in patch
    return self.partial_update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:82: in partial_update
    return self.update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:65: in update
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x059AF570>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019304, 'iat': 1663019004, 'jti': 'a5173309b881458b9c764621a8aeeda3', 'user_id': 15}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestUser/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 288, in patch
    return self.partial_update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 82, in partial_update
    return self.update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 65, in update
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
_____________ Test01UserAPI.test_07_03_users_username_patch_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x06040DB0>
user_client = <rest_framework.test.APIClient object at 0x06021AB0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_03_users_username_patch_user(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
>       response = user_client.patch(f'/api/v1/users/{user.username}/', data=data)

tests\test_01_users.py:376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:312: in patch
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:217: in patch
    return self.generic('PATCH', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:288: in patch
    return self.partial_update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:82: in partial_update
    return self.update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:65: in update
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x06021890>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019304, 'iat': 1663019004, 'jti': '364267b5bc6344d7a77ad7f5804ef757', 'user_id': 17}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestUser/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 288, in patch
    return self.partial_update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 82, in partial_update
    return self.update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 65, in update
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
_________ Test01UserAPI.test_07_05_users_username_put_user_restricted _________

self = <tests.test_01_users.Test01UserAPI object at 0x0607F110>
user_client = <rest_framework.test.APIClient object at 0x060396D0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_05_users_username_put_user_restricted(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
>       response = user_client.put(f'/api/v1/users/{user.username}/', data=data)

tests\test_01_users.py:389: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:304: in put
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:213: in put
    return self.generic('PUT', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:285: in put
    return self.update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:65: in update
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x06141EF0>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019304, 'iat': 1663019004, 'jti': 'db948c7b657f49dd940e216d99282bd7', 'user_id': 18}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestUser/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 285, in put
    return self.update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 65, in update
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x05908B70>
admin_client = <rest_framework.test.APIClient object at 0x0602AD50>

    @pytest.mark.django_db(transaction=True)
    def test_08_01_users_username_delete_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019305, 'iat': 1663019005, 'jti': '93397e9abdae479bb9819798bac00896', 'user_id': 19}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________ Test01UserAPI.test_08_02_users_username_delete_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x05A39690>
moderator_client = <rest_framework.test.APIClient object at 0x059BAC30>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_02_users_username_delete_moderator(self, moderator_client, user):
        users_before = get_user_model().objects.count()
>       response = moderator_client.delete(f'/api/v1/users/{user.username}/')

tests\test_01_users.py:410: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:320: in delete
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:221: in delete
    return self.generic('DELETE', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:291: in delete
    return self.destroy(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:90: in destroy
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x059BAA30>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019305, 'iat': 1663019005, 'jti': '27d20c4b3c284448b7b742a660123b29', 'user_id': 20}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestUser/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 291, in delete
    return self.destroy(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 90, in destroy
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
_____________ Test01UserAPI.test_08_03_users_username_delete_user _____________

self = <tests.test_01_users.Test01UserAPI object at 0x05A1A1B0>
user_client = <rest_framework.test.APIClient object at 0x06116130>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_03_users_username_delete_user(self, user_client, user):
        users_before = get_user_model().objects.count()
>       response = user_client.delete(f'/api/v1/users/{user.username}/')

tests\test_01_users.py:423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:320: in delete
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:221: in delete
    return self.generic('DELETE', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:291: in delete
    return self.destroy(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:90: in destroy
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x0608D590>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019305, 'iat': 1663019005, 'jti': '55c963035da0453e850e12240155c78c', 'user_id': 22}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestUser/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 291, in delete
    return self.destroy(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 90, in destroy
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
__________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x059AF770>
user_superuser_client = <rest_framework.test.APIClient object at 0x059AFFF0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_04_users_username_delete_superuser(self, user_superuser_client, user):
        users_before = get_user_model().objects.count()
>       response = user_superuser_client.delete(f'/api/v1/users/{user.username}/')

tests\test_01_users.py:436: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:320: in delete
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:221: in delete
    return self.generic('DELETE', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:291: in delete
    return self.destroy(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:90: in destroy
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x05A44F30>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019306, 'iat': 1663019006, 'jti': '175293f641444c3fae6bcfcc8beec7a8', 'user_id': 23}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/TestUser/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 291, in delete
    return self.destroy(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 90, in destroy
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
________________ Test01UserAPI.test_09_users_check_permissions ________________

self = <tests.test_01_users.Test01UserAPI object at 0x0608D630>
admin_client = <rest_framework.test.APIClient object at 0x05A28A70>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_09_users_check_permissions(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019306, 'iat': 1663019006, 'jti': '2b9715bfbff34091b1c47961dbdcaef2', 'user_id': 25}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x058F50F0>
admin_client = <rest_framework.test.APIClient object at 0x06073D50>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019306, 'iat': 1663019006, 'jti': '522dd4dffafb42219ec2b7fcdd922d60', 'user_id': 26}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_11_01_users_me_patch_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x05A421B0>
admin_client = <rest_framework.test.APIClient object at 0x05A3E2D0>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019307, 'iat': 1663019007, 'jti': 'b5f11073c16d44afa38c8e6b89c2c4ae', 'user_id': 27}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x05B16CB0>
user_client = <rest_framework.test.APIClient object at 0x06123690>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
>       response = user_client.patch('/api/v1/users/me/', data=data)

tests\test_01_users.py:559: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:312: in patch
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:217: in patch
    return self.generic('PATCH', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:288: in patch
    return self.partial_update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:82: in partial_update
    return self.update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:65: in update
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x05A5C2F0>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019307, 'iat': 1663019007, 'jti': 'b2f97d0db03d4baa8bf1b6a4cedf799d', 'user_id': 28}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/me/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 288, in patch
    return self.partial_update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 82, in partial_update
    return self.update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 65, in update
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
_______________ Test02CategoryAPI.test_03_category_delete_admin _______________

self = <tests.test_02_category.Test02CategoryAPI object at 0x05A95F90>
admin_client = <rest_framework.test.APIClient object at 0x0614D7D0>

    @pytest.mark.django_db(transaction=True)
    def test_03_category_delete_admin(self, admin_client):
        create_categories(admin_client)
        response = admin_client.delete('/api/v1/categories/books/')
>       assert response.status_code == 204, (
            'ѕроверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204
E       assert 403 == 204
E         +403
E         -204

tests\test_02_category.py:96: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019308, 'iat': 1663019008, 'jti': '8a7143c812b641e5864546a6749d27b7', 'user_id': 30}
{'token_type': 'access', 'exp': 1663019308, 'iat': 1663019008, 'jti': '8a7143c812b641e5864546a6749d27b7', 'user_id': 30}
{'token_type': 'access', 'exp': 1663019308, 'iat': 1663019008, 'jti': '8a7143c812b641e5864546a6749d27b7', 'user_id': 30}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/categories/books/
__________ Test02CategoryAPI.test_04_category_check_permission_admin __________

self = <tests.test_02_category.Test02CategoryAPI object at 0x05AE4E50>
client = <django.test.client.Client object at 0x05D42430>
admin_client = <rest_framework.test.APIClient object at 0x05D42E90>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'ћузыка',
            'slug': 'music'
        }
        response = client.post('/api/v1/categories/', data=data)
>       assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/categories/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/categories/` без токена авторизации возвращаетс€ статус 401
E       assert 201 == 401
E         +201
E         -401

tests\test_02_category.py:141: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019308, 'iat': 1663019008, 'jti': '213f3acddc3142ac87fb11b778ea278a', 'user_id': 31}
{'token_type': 'access', 'exp': 1663019308, 'iat': 1663019008, 'jti': '213f3acddc3142ac87fb11b778ea278a', 'user_id': 31}
_______________ Test02CategoryAPI.test_05_category_create_user ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x05AE4B30>
user_client = <rest_framework.test.APIClient object at 0x05A4C730>

    @pytest.mark.django_db(transaction=True)
    def test_05_category_create_user(self, user_client):
        url = '/api/v1/categories/'
        data = {
            'name': '¬с€кое разное',
            'slug': 'something'
        }
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе на `{url}`, создание категорий недоступно дл€ '
            f'пользовател€ с ролью user'
        )
E       AssertionError: ѕроверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно дл€ пользовател€ с ролью user
E       assert 201 == 403
E         +201
E         -403

tests\test_02_category.py:163: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019308, 'iat': 1663019008, 'jti': '5d0c3022b97c43f082b1922d51abddab', 'user_id': 32}
_____________ Test02CategoryAPI.test_06_category_create_moderator _____________

self = <tests.test_02_category.Test02CategoryAPI object at 0x05AFCBF0>
moderator_client = <rest_framework.test.APIClient object at 0x061329B0>

    @pytest.mark.django_db(transaction=True)
    def test_06_category_create_moderator(self, moderator_client):
        url = '/api/v1/categories/'
        data = {
            'name': '¬с€кое разное',
            'slug': 'something'
        }
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе на `{url}`, создание категорий недоступно дл€ '
            f'пользовател€ с ролью moderator'
        )
E       AssertionError: ѕроверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно дл€ пользовател€ с ролью moderator
E       assert 201 == 403
E         +201
E         -403

tests\test_02_category.py:177: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019308, 'iat': 1663019008, 'jti': '901deedf07c04854900f9d9b1d47cb77', 'user_id': 33}
____________________ Test03GenreAPI.test_03_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x060597B0>
admin_client = <rest_framework.test.APIClient object at 0x05A4C6B0>

    @pytest.mark.django_db(transaction=True)
    def test_03_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
        response = admin_client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
>       assert response.status_code == 204, (
            'ѕроверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204'
        )
E       AssertionError: ѕроверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204
E       assert 403 == 204
E         +403
E         -204

tests\test_03_genre.py:87: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '524654b9d0b843cf9e0089a742634395', 'user_id': 35}
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '524654b9d0b843cf9e0089a742634395', 'user_id': 35}
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '524654b9d0b843cf9e0089a742634395', 'user_id': 35}
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '524654b9d0b843cf9e0089a742634395', 'user_id': 35}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/genres/horror/
_______________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x059A1B50>
client = <django.test.client.Client object at 0x05A73C90>
admin_client = <rest_framework.test.APIClient object at 0x05A734F0>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Ѕоевик',
            'slug': 'action'
        }
        response = client.post('/api/v1/genres/', data=data)
>       assert response.status_code == 401, (
            'ѕроверьте, что при POST запросе `/api/v1/genres/` '
            'без токена авторизации возвращаетс€ статус 401'
        )
E       AssertionError: ѕроверьте, что при POST запросе `/api/v1/genres/` без токена авторизации возвращаетс€ статус 401
E       assert 201 == 401
E         +201
E         -401

tests\test_03_genre.py:129: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '293f37bf521b41789ed7ff7d85b91382', 'user_id': 36}
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '293f37bf521b41789ed7ff7d85b91382', 'user_id': 36}
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '293f37bf521b41789ed7ff7d85b91382', 'user_id': 36}
__________________ Test03GenreAPI.test_05_genre_create_user ___________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x0596FAF0>
user_client = <rest_framework.test.APIClient object at 0x0596F970>

    @pytest.mark.django_db(transaction=True)
    def test_05_genre_create_user(self, user_client):
        url = '/api/v1/genres/'
        data = {
            'name': '¬с€кое разное',
            'slug': 'something'
        }
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе на `{url}`, создание жанров недоступно дл€ '
            f'пользовател€ с ролью user'
        )
E       AssertionError: ѕроверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно дл€ пользовател€ с ролью user
E       assert 201 == 403
E         +201
E         -403

tests\test_03_genre.py:151: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': '34c40504c1ab49e489c94d7ee86ddcee', 'user_id': 37}
________________ Test03GenreAPI.test_06_genre_create_moderator ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x0592BDF0>
moderator_client = <rest_framework.test.APIClient object at 0x05F8A810>

    @pytest.mark.django_db(transaction=True)
    def test_06_genre_create_moderator(self, moderator_client):
        url = '/api/v1/genres/'
        data = {
            'name': '¬с€кое разное',
            'slug': 'something'
        }
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'ѕроверьте, что при POST запросе на `{url}`, создание жанров недоступно дл€ '
            f'пользовател€ с ролью moderator'
        )
E       AssertionError: ѕроверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно дл€ пользовател€ с ролью moderator
E       assert 201 == 403
E         +201
E         -403

tests\test_03_genre.py:165: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019309, 'iat': 1663019009, 'jti': 'e0584d5cdd9a4737826750319afce252', 'user_id': 38}
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x06028EF0>
admin_client = <rest_framework.test.APIClient object at 0x05F8A3F0>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 400, (
            'ѕроверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'ѕоворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': ' рутое пике'}
>       response = admin_client.post('/api/v1/titles/', data=data)

tests\test_04_title.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '94541b6395a94714bf0b371d71f3a6d3', 'user_id': 39}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '94541b6395a94714bf0b371d71f3a6d3', 'user_id': 39}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '94541b6395a94714bf0b371d71f3a6d3', 'user_id': 39}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '94541b6395a94714bf0b371d71f3a6d3', 'user_id': 39}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '94541b6395a94714bf0b371d71f3a6d3', 'user_id': 39}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '94541b6395a94714bf0b371d71f3a6d3', 'user_id': 39}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '94541b6395a94714bf0b371d71f3a6d3', 'user_id': 39}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x05D42BB0>
client = <django.test.client.Client object at 0x06059E50>
admin_client = <rest_framework.test.APIClient object at 0x060590D0>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': 'ef4991a904f743a3bedc7ee46f99c67a', 'user_id': 40}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': 'ef4991a904f743a3bedc7ee46f99c67a', 'user_id': 40}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': 'ef4991a904f743a3bedc7ee46f99c67a', 'user_id': 40}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': 'ef4991a904f743a3bedc7ee46f99c67a', 'user_id': 40}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': 'ef4991a904f743a3bedc7ee46f99c67a', 'user_id': 40}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': 'ef4991a904f743a3bedc7ee46f99c67a', 'user_id': 40}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
_______________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x05B5ECF0>
client = <django.test.client.Client object at 0x059F34B0>
admin_client = <rest_framework.test.APIClient object at 0x05A3EFB0>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:231: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '950ad09a8ec741b98de0147e0ef158fe', 'user_id': 41}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '950ad09a8ec741b98de0147e0ef158fe', 'user_id': 41}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '950ad09a8ec741b98de0147e0ef158fe', 'user_id': 41}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '950ad09a8ec741b98de0147e0ef158fe', 'user_id': 41}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '950ad09a8ec741b98de0147e0ef158fe', 'user_id': 41}
{'token_type': 'access', 'exp': 1663019310, 'iat': 1663019010, 'jti': '950ad09a8ec741b98de0147e0ef158fe', 'user_id': 41}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x059DA6F0>
client = <django.test.client.Client object at 0x06180FB0>
admin_client = <rest_framework.test.APIClient object at 0x061805D0>

    @pytest.mark.django_db(transaction=True)
    def test_01_review_not_auth(self, client, admin_client):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '29d77fe9fedb4e119a9b6decd036fa8b', 'user_id': 42}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '29d77fe9fedb4e119a9b6decd036fa8b', 'user_id': 42}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '29d77fe9fedb4e119a9b6decd036fa8b', 'user_id': 42}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '29d77fe9fedb4e119a9b6decd036fa8b', 'user_id': 42}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '29d77fe9fedb4e119a9b6decd036fa8b', 'user_id': 42}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '29d77fe9fedb4e119a9b6decd036fa8b', 'user_id': 42}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x05B05FB0>
admin_client = <rest_framework.test.APIClient object at 0x059A1750>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6153b9fa082246149404179a79cbb49a', 'user_id': 43}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6153b9fa082246149404179a79cbb49a', 'user_id': 43}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6153b9fa082246149404179a79cbb49a', 'user_id': 43}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6153b9fa082246149404179a79cbb49a', 'user_id': 43}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6153b9fa082246149404179a79cbb49a', 'user_id': 43}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6153b9fa082246149404179a79cbb49a', 'user_id': 43}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x05AE4C10>
client = <django.test.client.Client object at 0x05A2E530>
admin_client = <rest_framework.test.APIClient object at 0x05A2ED10>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6d1e727fdfc04fc498e9025ef5e1c978', 'user_id': 44}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6d1e727fdfc04fc498e9025ef5e1c978', 'user_id': 44}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6d1e727fdfc04fc498e9025ef5e1c978', 'user_id': 44}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6d1e727fdfc04fc498e9025ef5e1c978', 'user_id': 44}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6d1e727fdfc04fc498e9025ef5e1c978', 'user_id': 44}
{'token_type': 'access', 'exp': 1663019311, 'iat': 1663019011, 'jti': '6d1e727fdfc04fc498e9025ef5e1c978', 'user_id': 44}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x06163FF0>
client = <django.test.client.Client object at 0x0604A5F0>
admin_client = <rest_framework.test.APIClient object at 0x0604AC10>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '4bf8196c71684f01852f96120b2cdd35', 'user_id': 45}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '4bf8196c71684f01852f96120b2cdd35', 'user_id': 45}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '4bf8196c71684f01852f96120b2cdd35', 'user_id': 45}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '4bf8196c71684f01852f96120b2cdd35', 'user_id': 45}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '4bf8196c71684f01852f96120b2cdd35', 'user_id': 45}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '4bf8196c71684f01852f96120b2cdd35', 'user_id': 45}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05B671B0>
client = <django.test.client.Client object at 0x05E173F0>
admin_client = <rest_framework.test.APIClient object at 0x05E17450>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '58e814206e4d4d538eedd4d64eb6ed3e', 'user_id': 46}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '58e814206e4d4d538eedd4d64eb6ed3e', 'user_id': 46}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '58e814206e4d4d538eedd4d64eb6ed3e', 'user_id': 46}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '58e814206e4d4d538eedd4d64eb6ed3e', 'user_id': 46}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '58e814206e4d4d538eedd4d64eb6ed3e', 'user_id': 46}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '58e814206e4d4d538eedd4d64eb6ed3e', 'user_id': 46}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05A5CF30>
admin_client = <rest_framework.test.APIClient object at 0x05A330D0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '39364e486ee04b3781b3702137dfd4c8', 'user_id': 47}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '39364e486ee04b3781b3702137dfd4c8', 'user_id': 47}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '39364e486ee04b3781b3702137dfd4c8', 'user_id': 47}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '39364e486ee04b3781b3702137dfd4c8', 'user_id': 47}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '39364e486ee04b3781b3702137dfd4c8', 'user_id': 47}
{'token_type': 'access', 'exp': 1663019312, 'iat': 1663019012, 'jti': '39364e486ee04b3781b3702137dfd4c8', 'user_id': 47}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05A5CE10>
client = <django.test.client.Client object at 0x0602A6B0>
admin_client = <rest_framework.test.APIClient object at 0x05D51690>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '4a71aa57b7654086961d27f07c983354', 'user_id': 48}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '4a71aa57b7654086961d27f07c983354', 'user_id': 48}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '4a71aa57b7654086961d27f07c983354', 'user_id': 48}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '4a71aa57b7654086961d27f07c983354', 'user_id': 48}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '4a71aa57b7654086961d27f07c983354', 'user_id': 48}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '4a71aa57b7654086961d27f07c983354', 'user_id': 48}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05908670>
client = <django.test.client.Client object at 0x05AD0950>
admin_client = <rest_framework.test.APIClient object at 0x06039610>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: ѕоворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '53d6621de25b4db1ba3e42c8dcb1c1e7', 'user_id': 49}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '53d6621de25b4db1ba3e42c8dcb1c1e7', 'user_id': 49}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '53d6621de25b4db1ba3e42c8dcb1c1e7', 'user_id': 49}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '53d6621de25b4db1ba3e42c8dcb1c1e7', 'user_id': 49}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '53d6621de25b4db1ba3e42c8dcb1c1e7', 'user_id': 49}
{'token_type': 'access', 'exp': 1663019313, 'iat': 1663019013, 'jti': '53d6621de25b4db1ba3e42c8dcb1c1e7', 'user_id': 49}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
============================== warnings summary ===============================
..\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:943
  e:\dev\s_10_project\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:943: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    collections.MutableMapping.register(ParseResults)

..\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:3226
  e:\dev\s_10_project\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:3226: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    elif isinstance( exprs, collections.Iterable ):

tests/test_00_user_registration.py: 1 warning
tests/test_01_users.py: 19 warnings
tests/test_02_category.py: 13 warnings
tests/test_03_genre.py: 15 warnings
tests/test_04_title.py: 19 warnings
tests/test_05_review.py: 24 warnings
tests/test_06_comment.py: 24 warnings
  e:\dev\s_10_project\venv\lib\site-packages\jwt\api_jwt.py:81: DeprecationWarning: It is strongly recommended that you pass in a value for the "algorithms" argument when calling decode(). This argument will be mandatory in a future version.
    DeprecationWarning

tests/test_00_user_registration.py: 1 warning
tests/test_01_users.py: 19 warnings
tests/test_02_category.py: 13 warnings
tests/test_03_genre.py: 15 warnings
tests/test_04_title.py: 19 warnings
tests/test_05_review.py: 24 warnings
tests/test_06_comment.py: 24 warnings
  e:\dev\s_10_project\venv\lib\site-packages\jwt\api_jws.py:145: DeprecationWarning: It is strongly recommended that you pass in a value for the "algorithms" argument when calling decode(). This argument will be mandatory in a future version.
    DeprecationWarning

tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
  e:\dev\s_10_project\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Category'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth
tests/test_03_genre.py::Test03GenreAPI::test_02_genre
  e:\dev\s_10_project\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Genre'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user
FAILED tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user
FAILED tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - us...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete - Assert...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user - As...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - TypeErro...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - TypeEr...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - Ty...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - TypeE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - Type...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - TypeErro...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ty...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
================= 44 failed, 9 passed, 236 warnings in 19.49s =================
