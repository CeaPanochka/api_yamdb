============================= test session starts =============================
platform win32 -- Python 3.7.0, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- e:\dev\s_10_project\venv\scripts\python.exe
django: settings: api_yamdb.settings (from ini)
rootdir: E:\Dev\s_10_project\api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: django-4.4.0, pythonpath-0.7.3
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup PASSED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup PASSED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup PASSED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user FAILED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted PASSED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated FAILED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated FAILED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser FAILED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin FAILED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin FAILED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin FAILED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator FAILED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user FAILED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted FAILED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin FAILED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator FAILED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user FAILED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser FAILED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions FAILED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth PASSED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin PASSED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin FAILED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user FAILED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator FAILED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth PASSED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre PASSED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete FAILED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user FAILED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator FAILED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth PASSED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

================================== FAILURES ===================================
_________ Test00UserRegistration.test_00_valid_data_admin_create_user _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x05B00530>
admin_client = <rest_framework.test.APIClient object at 0x05CD3F30>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_admin_create_user(self, admin_client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = admin_client.post(self.url_admin_create_user, data=valid_data)
        outbox_after = mail.outbox
    
        assert response.status_code != 404, (
            f'Страница `{self.url_admin_create_user}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 201
>       assert response.status_code == code, (
            f'Проверьте, что при {request_type} запросе `{self.url_admin_create_user}` с валидными данными '
            f'от имени администратора, создается пользователь и возвращается статус {code}'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/users/` с валидными данными от имени администратора, создается пользователь и возвращается статус 201
E       assert 403 == 201
E         +403
E         -201

tests\test_00_user_registration.py:142: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058392, 'iat': 1663058092, 'jti': '1aaf66286a2b46ee8f7ddcdcd1dce9d2', 'user_id': 2}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x05D56A10>
client = <django.test.client.Client object at 0x05D56BF0>

    @pytest.mark.django_db(transaction=True)
    def test_00_obtain_jwt_token_invalid_data(self, client):
    
        request_type = 'POST'
>       response = client.post(self.url_token)

tests\test_00_user_registration.py:171: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\django\test\client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:357: in post
    secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.TokenObtainPairConfirmEmailView object at 0x05CF1C70>
request = <rest_framework.request.Request: POST '/api/v1/auth/token/'>
args = (), kwargs = {}

    def post(self, request, *args, **kwargs):
        if ('username' not in request.data or
            'confirmation_code' not in request.data):
>           raise Exception('Введите данные')
E           Exception: Введите данные

api_yamdb\api\views.py:49: Exception
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/auth/token/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "E:\Dev\s_10_project\api_yamdb\api_yamdb\api\views.py", line 49, in post
    raise Exception('Введите данные')
Exception: Введите данные
______ Test00UserRegistration.test_00_registration_same_email_restricted ______

self = <django.db.backends.utils.CursorWrapper object at 0x05DB84B0>
sql = 'INSERT INTO "users_user" ("password", "last_login", "is_superuser", "first_name", "last_name", "is_staff", "is_active...", "bio", "role", "is_moderator", "confirmation_code") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)'
params = ['pbkdf2_sha256$150000$CVekvLOMXipM$5t1V94KVD4j3stCgx2KOR0HRWIppaWwbEi0jH1m9UCI=', None, False, '', '', False, ...]
ignored_wrapper_args = (False, {'connection': <django.db.backends.sqlite3.base.DatabaseWrapper object at 0x04A156F0>, 'cursor': <django.db.backends.utils.CursorWrapper object at 0x05DB84B0>})

    def _execute(self, sql, params, *ignored_wrapper_args):
        self.db.validate_no_broken_transaction()
        with self.db.wrap_database_errors:
            if params is None:
                return self.cursor.execute(sql)
            else:
>               return self.cursor.execute(sql, params)

..\venv\lib\site-packages\django\db\backends\utils.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x05DC7F50>
query = 'INSERT INTO "users_user" ("password", "last_login", "is_superuser", "first_name", "last_name", "is_staff", "is_active...rname", "email", "bio", "role", "is_moderator", "confirmation_code") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
params = ['pbkdf2_sha256$150000$CVekvLOMXipM$5t1V94KVD4j3stCgx2KOR0HRWIppaWwbEi0jH1m9UCI=', None, False, '', '', False, ...]

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       sqlite3.IntegrityError: UNIQUE constraint failed: users_user.email

..\venv\lib\site-packages\django\db\backends\sqlite3\base.py:383: IntegrityError

The above exception was the direct cause of the following exception:

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x05E11C30>
client = <django.test.client.Client object at 0x05D85770>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 200
        assert response.status_code == code, (
            f'Проверьте, что при {request_type} запросе `{self.url_signup}` '
            f'можно создать пользователя с валидными данными и возвращается статус {code}'
        )
    
        duplicate_email_data = {
            'email': valid_email_1,
            'username': valid_username_2
        }
>       response = client.post(self.url_signup, data=duplicate_email_data)

tests\test_00_user_registration.py:267: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\django\test\client.py:543: in post
    response = super().post(path, data=data, content_type=content_type, secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:357: in post
    secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
api_yamdb\api\views.py:75: in post
    serializer.save(confirmation_code=confirmation_code,)
..\venv\lib\site-packages\rest_framework\serializers.py:205: in save
    self.instance = self.create(validated_data)
api_yamdb\api\serializers.py:122: in create
    return User.objects.create_user(**validated_data)
api_yamdb\users\models.py:35: in create_user
    user.save()
..\venv\lib\site-packages\django\contrib\auth\base_user.py:66: in save
    super().save(*args, **kwargs)
..\venv\lib\site-packages\django\db\models\base.py:744: in save
    force_update=force_update, update_fields=update_fields)
..\venv\lib\site-packages\django\db\models\base.py:782: in save_base
    force_update, using, update_fields,
..\venv\lib\site-packages\django\db\models\base.py:873: in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
..\venv\lib\site-packages\django\db\models\base.py:911: in _do_insert
    using=using, raw=raw)
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
..\venv\lib\site-packages\django\db\models\query.py:1186: in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
..\venv\lib\site-packages\django\db\models\sql\compiler.py:1377: in execute_sql
    cursor.execute(sql, params)
..\venv\lib\site-packages\django\db\backends\utils.py:67: in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
..\venv\lib\site-packages\django\db\backends\utils.py:76: in _execute_with_wrappers
    return executor(sql, params, many, context)
..\venv\lib\site-packages\django\db\backends\utils.py:84: in _execute
    return self.cursor.execute(sql, params)
..\venv\lib\site-packages\django\db\utils.py:89: in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
..\venv\lib\site-packages\django\db\backends\utils.py:84: in _execute
    return self.cursor.execute(sql, params)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <django.db.backends.sqlite3.base.SQLiteCursorWrapper object at 0x05DC7F50>
query = 'INSERT INTO "users_user" ("password", "last_login", "is_superuser", "first_name", "last_name", "is_staff", "is_active...rname", "email", "bio", "role", "is_moderator", "confirmation_code") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
params = ['pbkdf2_sha256$150000$CVekvLOMXipM$5t1V94KVD4j3stCgx2KOR0HRWIppaWwbEi0jH1m9UCI=', None, False, '', '', False, ...]

    def execute(self, query, params=None):
        if params is None:
            return Database.Cursor.execute(self, query)
        query = self.convert_query(query)
>       return Database.Cursor.execute(self, query, params)
E       django.db.utils.IntegrityError: UNIQUE constraint failed: users_user.email

..\venv\lib\site-packages\django\db\backends\sqlite3\base.py:383: IntegrityError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/auth/signup/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\backends\utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\backends\sqlite3\base.py", line 383, in execute
    return Database.Cursor.execute(self, query, params)
sqlite3.IntegrityError: UNIQUE constraint failed: users_user.email

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "E:\Dev\s_10_project\api_yamdb\api_yamdb\api\views.py", line 75, in post
    serializer.save(confirmation_code=confirmation_code,)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 205, in save
    self.instance = self.create(validated_data)
  File "E:\Dev\s_10_project\api_yamdb\api_yamdb\api\serializers.py", line 122, in create
    return User.objects.create_user(**validated_data)
  File "E:\Dev\s_10_project\api_yamdb\api_yamdb\users\models.py", line 35, in create_user
    user.save()
  File "e:\dev\s_10_project\venv\lib\site-packages\django\contrib\auth\base_user.py", line 66, in save
    super().save(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\models\base.py", line 744, in save
    force_update=force_update, update_fields=update_fields)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\models\base.py", line 782, in save_base
    force_update, using, update_fields,
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\models\base.py", line 873, in _save_table
    result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\models\base.py", line 911, in _do_insert
    using=using, raw=raw)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\models\manager.py", line 82, in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\models\query.py", line 1186, in _insert
    return query.get_compiler(using=using).execute_sql(return_id)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\models\sql\compiler.py", line 1377, in execute_sql
    cursor.execute(sql, params)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\backends\utils.py", line 67, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\backends\utils.py", line 76, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\backends\utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\utils.py", line 89, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\backends\utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\db\backends\sqlite3\base.py", line 383, in execute
    return Database.Cursor.execute(self, query, params)
django.db.utils.IntegrityError: UNIQUE constraint failed: users_user.email
________________ Test01UserAPI.test_01_users_not_authenticated ________________

self = <tests.test_01_users.Test01UserAPI object at 0x05FF3E30>
client = <django.test.client.Client object at 0x05FF3F30>

    @pytest.mark.django_db(transaction=True)
    def test_01_users_not_authenticated(self, client):
        response = client.get('/api/v1/users/')
    
        assert response.status_code != 404, (
            'Страница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
    
>       assert response.status_code == 401, (
            'Проверьте, что при GET запросе `/api/v1/users/` без токена авторизации возвращается статус 401'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` без токена авторизации возвращается статус 401
E       assert 403 == 401
E         +403
E         -401

tests\test_01_users.py:17: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
___________ Test01UserAPI.test_02_users_username_not_authenticated ____________

self = <tests.test_01_users.Test01UserAPI object at 0x057A4290>
client = <django.test.client.Client object at 0x0570BD30>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_users_username_not_authenticated(self, client, admin):
        response = client.get(f'/api/v1/users/{admin.username}/')
    
>       assert response.status_code != 404, (
            'Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:25: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
______________ Test01UserAPI.test_03_users_me_not_authenticated _______________

self = <tests.test_01_users.Test01UserAPI object at 0x057A42D0>
client = <django.test.client.Client object at 0x05718DF0>

    @pytest.mark.django_db(transaction=True)
    def test_03_users_me_not_authenticated(self, client):
>       response = client.get('/api/v1/users/me/')

tests\test_01_users.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\django\test\client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
..\venv\lib\site-packages\django\test\client.py:347: in get
    **extra,
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:282: in get
    return self.retrieve(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:54: in retrieve
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x05812BD0>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/me/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 282, in get
    return self.retrieve(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 54, in retrieve
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
____________________ Test01UserAPI.test_04_users_get_admin ____________________

self = <tests.test_01_users.Test01UserAPI object at 0x05E80950>
admin_client = <rest_framework.test.APIClient object at 0x05DB8C90>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
        assert response.status_code != 404, (
            'Страница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
>       assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращается статус 200'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращается статус 200
E       assert 403 == 200
E         +403
E         -200

tests\test_01_users.py:51: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058394, 'iat': 1663058094, 'jti': '23f8e7a78d2542fe99b5d2a09ccfcce8', 'user_id': 5}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_04_02_users_get_search __________________

self = <tests.test_01_users.Test01UserAPI object at 0x05AE6570>
admin_client = <rest_framework.test.APIClient object at 0x05D7EED0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
        assert response.status_code != 404, (
            'Страница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*'
        )
        reponse_json = response.json()
>       assert 'results' in reponse_json and isinstance(reponse_json.get('results'), list), (
            'Проверьте, что при GET запросе `/api/v1/users/?search={username}` '
            'результаты возвращаются под ключом `results` и в виде списка.'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/?search={username}` результаты возвращаются под ключом `results` и в виде списка.
E       assert ('results' in {'detail': 'You do not have permission to perform this action.'})

tests\test_01_users.py:97: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058394, 'iat': 1663058094, 'jti': '94dea9b27b4f42cca004198586f30b3b', 'user_id': 6}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_05_01_users_post_admin __________________

self = <tests.test_01_users.Test01UserAPI object at 0x05AE9DB0>
admin_client = <rest_framework.test.APIClient object at 0x05E111F0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
>       assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400
E       assert 403 == 400
E         +403
E         -400

tests\test_01_users.py:135: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058395, 'iat': 1663058095, 'jti': '10798bb0863f4d50871f96fe3d6280f6', 'user_id': 8}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_05_02_users_post_user_superuser ______________

self = <tests.test_01_users.Test01UserAPI object at 0x05CDF9F0>
user_superuser_client = <rest_framework.test.APIClient object at 0x05917A30>

    @pytest.mark.django_db(transaction=True)
    def test_05_02_users_post_user_superuser(self, user_superuser_client):
        users = get_user_model().objects.all()
        users_before = users.count()
        valid_data = {
            'username': 'TestUser_3',
            'role': 'user',
            'email': 'testuser3@yamdb.fake'
        }
        response = user_superuser_client.post('/api/v1/users/', data=valid_data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/users/` от суперпользователя, '
            'с правильными данными, возвращаете статус 201.'
        )
        users_after = users.count()
>       assert users_after == users_before + 1, (
            'Проверьте, что при POST запросе `/api/v1/users/` от суперпользователя, '
            'с правильными данными, создается пользователь.'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/users/` от суперпользователя, с правильными данными, создается пользователь.
E       assert 1 == 2
E         +1
E         -2

tests\test_01_users.py:265: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058395, 'iat': 1663058095, 'jti': '89da27d1650641d490d8a929bb628425', 'user_id': 9}
_______________ Test01UserAPI.test_06_users_username_get_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x05961FB0>
admin_client = <rest_framework.test.APIClient object at 0x05A44790>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:272: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058395, 'iat': 1663058095, 'jti': '3e00dd0ce9fd4cbe88bcd0eeaa9ea2cf', 'user_id': 10}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
_____________ Test01UserAPI.test_06_users_username_get_not_admin ______________

self = <tests.test_01_users.Test01UserAPI object at 0x058443B0>
moderator_client = <rest_framework.test.APIClient object at 0x05892DB0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_06_users_username_get_not_admin(self, moderator_client, admin):
        response = moderator_client.get(f'/api/v1/users/{admin.username}/')
>       assert response.status_code != 404, (
            'Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: Страница `/api/v1/users/{username}/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests\test_01_users.py:315: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestAdmin/
_____________ Test01UserAPI.test_07_01_users_username_patch_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0573A990>
admin_client = <rest_framework.test.APIClient object at 0x0573A810>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_07_01_users_username_patch_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:326: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058396, 'iat': 1663058096, 'jti': '12c11c4101044169951867803113298b', 'user_id': 13}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
___________ Test01UserAPI.test_07_02_users_username_patch_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x05E11DF0>
moderator_client = <rest_framework.test.APIClient object at 0x05D6C5B0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_02_users_username_patch_moderator(self, moderator_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = moderator_client.patch(f'/api/v1/users/{user.username}/', data=data)
>       assert response.status_code == 403, (
            'Проверьте, что при PATCH запросе `/api/v1/users/{username}/` '
            'пользователь с ролью moderator не может изменять данные других пользователей'
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью moderator не может изменять данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:364: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_07_03_users_username_patch_user ______________

self = <tests.test_01_users.Test01UserAPI object at 0x058FE630>
user_client = <rest_framework.test.APIClient object at 0x058D0890>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_03_users_username_patch_user(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = user_client.patch(f'/api/v1/users/{user.username}/', data=data)
>       assert response.status_code == 403, (
            'Проверьте, что при PATCH запросе `/api/v1/users/{username}/` '
            'пользователь с ролью user не может изменять данные других пользователей'
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/{username}/` пользователь с ролью user не может изменять данные других пользователей
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:377: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_________ Test01UserAPI.test_07_05_users_username_put_user_restricted _________

self = <tests.test_01_users.Test01UserAPI object at 0x05A2CF30>
user_client = <rest_framework.test.APIClient object at 0x05E263B0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_07_05_users_username_put_user_restricted(self, user_client, user):
        data = {
            'first_name': 'New USer Firstname',
            'last_name': 'New USer Lastname',
            'bio': 'new user bio'
        }
        response = user_client.put(f'/api/v1/users/{user.username}/', data=data)
        code = 403
>       assert response.status_code == code, (
            'Проверьте, что PUT запрос на `/api/v1/users/{username}/` '
            f'не доступен и возвращается статус {code}'
        )
E       AssertionError: Проверьте, что PUT запрос на `/api/v1/users/{username}/` не доступен и возвращается статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:391: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
____________ Test01UserAPI.test_08_01_users_username_delete_admin _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0595CD50>
admin_client = <rest_framework.test.APIClient object at 0x060A7F30>

    @pytest.mark.django_db(transaction=True)
    def test_08_01_users_username_delete_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:398: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058397, 'iat': 1663058097, 'jti': 'd532a969b779404599ecdf8e72731ef2', 'user_id': 18}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________ Test01UserAPI.test_08_02_users_username_delete_moderator ___________

self = <tests.test_01_users.Test01UserAPI object at 0x0581C4F0>
moderator_client = <rest_framework.test.APIClient object at 0x05FBA130>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_02_users_username_delete_moderator(self, moderator_client, user):
        users_before = get_user_model().objects.count()
        response = moderator_client.delete(f'/api/v1/users/{user.username}/')
>       assert response.status_code == 403, (
            'Проверьте, что при DELETE запросе `/api/v1/users/{username}/`'
            'не от админа, возвращаете статус 403'
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/users/{username}/`не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:411: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
_____________ Test01UserAPI.test_08_03_users_username_delete_user _____________

self = <tests.test_01_users.Test01UserAPI object at 0x0577D9F0>
user_client = <rest_framework.test.APIClient object at 0x057533B0>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_03_users_username_delete_user(self, user_client, user):
        users_before = get_user_model().objects.count()
        response = user_client.delete(f'/api/v1/users/{user.username}/')
>       assert response.status_code == 403, (
            'Проверьте, что при DELETE запросе `/api/v1/users/{username}/` '
            'не от админа, возвращаете статус 403'
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/users/{username}/` не от админа, возвращаете статус 403
E       assert 404 == 403
E         +404
E         -403

tests\test_01_users.py:424: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
__________ Test01UserAPI.test_08_04_users_username_delete_superuser ___________

self = <tests.test_01_users.Test01UserAPI object at 0x05917090>
user_superuser_client = <rest_framework.test.APIClient object at 0x060A7E30>
user = <User: TestUser>

    @pytest.mark.django_db(transaction=True)
    def test_08_04_users_username_delete_superuser(self, user_superuser_client, user):
        users_before = get_user_model().objects.count()
        response = user_superuser_client.delete(f'/api/v1/users/{user.username}/')
        code = 204
>       assert response.status_code == code, (
            'Проверьте, что при DELETE запросе `/api/v1/users/{username}/` '
            f'от суперпользователя, возвращаете статус {code}'
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/users/{username}/` от суперпользователя, возвращаете статус 204
E       assert 404 == 204
E         +404
E         -204

tests\test_01_users.py:438: AssertionError
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Not Found: /api/v1/users/TestUser/
________________ Test01UserAPI.test_09_users_check_permissions ________________

self = <tests.test_01_users.Test01UserAPI object at 0x056D8E90>
admin_client = <rest_framework.test.APIClient object at 0x058508B0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_09_users_check_permissions(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:488: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058398, 'iat': 1663058098, 'jti': 'e07e681c51bf4558bafc8a2415bdb540', 'user_id': 24}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
__________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x058701F0>
admin_client = <rest_framework.test.APIClient object at 0x056FF330>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:494: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058398, 'iat': 1663058098, 'jti': 'faa816864b154106a7d114fe97ff7df5', 'user_id': 25}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_11_01_users_me_patch_admin ________________

self = <tests.test_01_users.Test01UserAPI object at 0x05799190>
admin_client = <rest_framework.test.APIClient object at 0x0587DFB0>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
>       user, moderator = create_users_api(admin_client)

tests\test_01_users.py:528: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:13: in create_users_api
    user = get_user_model().objects.get(username=data['username'])
..\venv\lib\site-packages\django\db\models\manager.py:82: in manager_method
    return getattr(self.get_queryset(), name)(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <QuerySet [<User: TestAdmin>]>, args = ()
kwargs = {'username': 'TestUser'}, clone = <QuerySet []>, num = 0

    def get(self, *args, **kwargs):
        """
        Perform the query and return a single object matching the given
        keyword arguments.
        """
        clone = self.filter(*args, **kwargs)
        if self.query.can_filter() and not self.query.distinct_fields:
            clone = clone.order_by()
        num = len(clone)
        if num == 1:
            return clone._result_cache[0]
        if not num:
            raise self.model.DoesNotExist(
                "%s matching query does not exist." %
>               self.model._meta.object_name
            )
E           users.models.User.DoesNotExist: User matching query does not exist.

..\venv\lib\site-packages\django\db\models\query.py:408: DoesNotExist
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058399, 'iat': 1663058099, 'jti': '225d570127f24b2e89f3c5115ab8e6fc', 'user_id': 26}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/users/
________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x05AA9AF0>
user_client = <rest_framework.test.APIClient object at 0x0569A450>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
>       response = user_client.patch('/api/v1/users/me/', data=data)

tests\test_01_users.py:559: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:312: in patch
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:217: in patch
    return self.generic('PATCH', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\django\views\generic\base.py:71: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\generics.py:288: in patch
    return self.partial_update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:82: in partial_update
    return self.update(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:65: in update
    instance = self.get_object()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <api.views.UserDetail object at 0x0590AAF0>

    def get_object(self):
        """
        Returns the object the view is displaying.
    
        You may want to override this if you need to provide non-standard
        queryset lookups.  Eg if objects are referenced using multiple
        keyword arguments in the url conf.
        """
        queryset = self.filter_queryset(self.get_queryset())
    
        # Perform the lookup filtering.
        lookup_url_kwarg = self.lookup_url_kwarg or self.lookup_field
    
        assert lookup_url_kwarg in self.kwargs, (
            'Expected view %s to be called with a URL keyword argument '
            'named "%s". Fix your URL conf, or set the `.lookup_field` '
            'attribute on the view correctly.' %
>           (self.__class__.__name__, lookup_url_kwarg)
        )
E       AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.

..\venv\lib\site-packages\rest_framework\generics.py:92: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058399, 'iat': 1663058099, 'jti': '2f2595f6ea8e437fa5c46629f4157db2', 'user_id': 27}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/users/me/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\generic\base.py", line 71, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 288, in patch
    return self.partial_update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 82, in partial_update
    return self.update(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 65, in update
    instance = self.get_object()
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\generics.py", line 92, in get_object
    (self.__class__.__name__, lookup_url_kwarg)
AssertionError: Expected view UserDetail to be called with a URL keyword argument named "pk". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.
_______________ Test02CategoryAPI.test_03_category_delete_admin _______________

self = <tests.test_02_category.Test02CategoryAPI object at 0x0585B390>
admin_client = <rest_framework.test.APIClient object at 0x0570BA50>

    @pytest.mark.django_db(transaction=True)
    def test_03_category_delete_admin(self, admin_client):
        create_categories(admin_client)
        response = admin_client.delete('/api/v1/categories/books/')
>       assert response.status_code == 204, (
            'Проверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204'
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204
E       assert 403 == 204
E         +403
E         -204

tests\test_02_category.py:96: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058399, 'iat': 1663058099, 'jti': 'bcba46546f514c1a9e4c52db74c0270f', 'user_id': 29}
{'token_type': 'access', 'exp': 1663058399, 'iat': 1663058099, 'jti': 'bcba46546f514c1a9e4c52db74c0270f', 'user_id': 29}
{'token_type': 'access', 'exp': 1663058399, 'iat': 1663058099, 'jti': 'bcba46546f514c1a9e4c52db74c0270f', 'user_id': 29}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/categories/books/
__________ Test02CategoryAPI.test_04_category_check_permission_admin __________

self = <tests.test_02_category.Test02CategoryAPI object at 0x05E97F50>
client = <django.test.client.Client object at 0x0581C890>
admin_client = <rest_framework.test.APIClient object at 0x057471F0>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'Музыка',
            'slug': 'music'
        }
        response = client.post('/api/v1/categories/', data=data)
>       assert response.status_code == 401, (
            'Проверьте, что при POST запросе `/api/v1/categories/` '
            'без токена авторизации возвращается статус 401'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/categories/` без токена авторизации возвращается статус 401
E       assert 201 == 401
E         +201
E         -401

tests\test_02_category.py:141: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058400, 'iat': 1663058100, 'jti': '49dce527788140b081671e0ac7386d4b', 'user_id': 30}
{'token_type': 'access', 'exp': 1663058400, 'iat': 1663058100, 'jti': '49dce527788140b081671e0ac7386d4b', 'user_id': 30}
_______________ Test02CategoryAPI.test_05_category_create_user ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x056D89B0>
user_client = <rest_framework.test.APIClient object at 0x05FBAB90>

    @pytest.mark.django_db(transaction=True)
    def test_05_category_create_user(self, user_client):
        url = '/api/v1/categories/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание категорий недоступно для '
            f'пользователя с ролью user'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно для пользователя с ролью user
E       assert 201 == 403
E         +201
E         -403

tests\test_02_category.py:163: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058400, 'iat': 1663058100, 'jti': '31ba51ce6016483fa228d168b7d42c54', 'user_id': 31}
_____________ Test02CategoryAPI.test_06_category_create_moderator _____________

self = <tests.test_02_category.Test02CategoryAPI object at 0x05FBA1F0>
moderator_client = <rest_framework.test.APIClient object at 0x056BBC30>

    @pytest.mark.django_db(transaction=True)
    def test_06_category_create_moderator(self, moderator_client):
        url = '/api/v1/categories/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание категорий недоступно для '
            f'пользователя с ролью moderator'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно для пользователя с ролью moderator
E       assert 201 == 403
E         +201
E         -403

tests\test_02_category.py:177: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058400, 'iat': 1663058100, 'jti': '2eacc29338aa496cadffb37d27378f58', 'user_id': 32}
____________________ Test03GenreAPI.test_03_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x0569C490>
admin_client = <rest_framework.test.APIClient object at 0x057D7D90>

    @pytest.mark.django_db(transaction=True)
    def test_03_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
        response = admin_client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
>       assert response.status_code == 204, (
            'Проверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204'
        )
E       AssertionError: Проверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204
E       assert 403 == 204
E         +403
E         -204

tests\test_03_genre.py:87: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '834167f1101e40ba96e7d4d7fad0beb9', 'user_id': 34}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '834167f1101e40ba96e7d4d7fad0beb9', 'user_id': 34}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '834167f1101e40ba96e7d4d7fad0beb9', 'user_id': 34}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '834167f1101e40ba96e7d4d7fad0beb9', 'user_id': 34}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Forbidden: /api/v1/genres/horror/
_______________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x057D7170>
client = <django.test.client.Client object at 0x05792470>
admin_client = <rest_framework.test.APIClient object at 0x05792690>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Боевик',
            'slug': 'action'
        }
        response = client.post('/api/v1/genres/', data=data)
>       assert response.status_code == 401, (
            'Проверьте, что при POST запросе `/api/v1/genres/` '
            'без токена авторизации возвращается статус 401'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/genres/` без токена авторизации возвращается статус 401
E       assert 201 == 401
E         +201
E         -401

tests\test_03_genre.py:129: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': 'f791b61cade5443a8c95af88c168a6d2', 'user_id': 35}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': 'f791b61cade5443a8c95af88c168a6d2', 'user_id': 35}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': 'f791b61cade5443a8c95af88c168a6d2', 'user_id': 35}
__________________ Test03GenreAPI.test_05_genre_create_user ___________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x05723E30>
user_client = <rest_framework.test.APIClient object at 0x05792C50>

    @pytest.mark.django_db(transaction=True)
    def test_05_genre_create_user(self, user_client):
        url = '/api/v1/genres/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание жанров недоступно для '
            f'пользователя с ролью user'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно для пользователя с ролью user
E       assert 201 == 403
E         +201
E         -403

tests\test_03_genre.py:151: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '7d980344c5fe4759ae997addb0864ccb', 'user_id': 36}
________________ Test03GenreAPI.test_06_genre_create_moderator ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x0582CEB0>
moderator_client = <rest_framework.test.APIClient object at 0x057B2B70>

    @pytest.mark.django_db(transaction=True)
    def test_06_genre_create_moderator(self, moderator_client):
        url = '/api/v1/genres/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание жанров недоступно для '
            f'пользователя с ролью moderator'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно для пользователя с ролью moderator
E       assert 201 == 403
E         +201
E         -403

tests\test_03_genre.py:165: AssertionError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '3984e084238247c7b495a94d3d0e2c90', 'user_id': 37}
_____________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x058126B0>
admin_client = <rest_framework.test.APIClient object at 0x05718150>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
>       response = admin_client.post('/api/v1/titles/', data=data)

tests\test_04_title.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '2637f3a6379640d2a69d17f26b319ee0', 'user_id': 38}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '2637f3a6379640d2a69d17f26b319ee0', 'user_id': 38}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '2637f3a6379640d2a69d17f26b319ee0', 'user_id': 38}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '2637f3a6379640d2a69d17f26b319ee0', 'user_id': 38}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '2637f3a6379640d2a69d17f26b319ee0', 'user_id': 38}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '2637f3a6379640d2a69d17f26b319ee0', 'user_id': 38}
{'token_type': 'access', 'exp': 1663058401, 'iat': 1663058101, 'jti': '2637f3a6379640d2a69d17f26b319ee0', 'user_id': 38}
------------------------------ Captured log call ------------------------------
WARNING  django.request:log.py:228 Bad Request: /api/v1/titles/
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x057A9670>
client = <django.test.client.Client object at 0x057477F0>
admin_client = <rest_framework.test.APIClient object at 0x05747630>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '396f24f1c0d74588bbeb3d6aae286a7a', 'user_id': 39}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '396f24f1c0d74588bbeb3d6aae286a7a', 'user_id': 39}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '396f24f1c0d74588bbeb3d6aae286a7a', 'user_id': 39}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '396f24f1c0d74588bbeb3d6aae286a7a', 'user_id': 39}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '396f24f1c0d74588bbeb3d6aae286a7a', 'user_id': 39}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '396f24f1c0d74588bbeb3d6aae286a7a', 'user_id': 39}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
_______________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x05E78330>
client = <django.test.client.Client object at 0x060BC130>
admin_client = <rest_framework.test.APIClient object at 0x05E74BF0>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests\test_04_title.py:231: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '4366670adc254bc09f6d3fbe711360d6', 'user_id': 40}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '4366670adc254bc09f6d3fbe711360d6', 'user_id': 40}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '4366670adc254bc09f6d3fbe711360d6', 'user_id': 40}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '4366670adc254bc09f6d3fbe711360d6', 'user_id': 40}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '4366670adc254bc09f6d3fbe711360d6', 'user_id': 40}
{'token_type': 'access', 'exp': 1663058402, 'iat': 1663058102, 'jti': '4366670adc254bc09f6d3fbe711360d6', 'user_id': 40}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
___________________ Test05ReviewAPI.test_01_review_not_auth ___________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x0577D050>
client = <django.test.client.Client object at 0x05917630>
admin_client = <rest_framework.test.APIClient object at 0x05A44110>

    @pytest.mark.django_db(transaction=True)
    def test_01_review_not_auth(self, client, admin_client):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'e5dd056c522c48a8a7e1dcdf126d1a64', 'user_id': 41}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'e5dd056c522c48a8a7e1dcdf126d1a64', 'user_id': 41}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'e5dd056c522c48a8a7e1dcdf126d1a64', 'user_id': 41}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'e5dd056c522c48a8a7e1dcdf126d1a64', 'user_id': 41}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'e5dd056c522c48a8a7e1dcdf126d1a64', 'user_id': 41}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'e5dd056c522c48a8a7e1dcdf126d1a64', 'user_id': 41}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x05FC9770>
admin_client = <rest_framework.test.APIClient object at 0x061983F0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests\test_05_review.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'fa563add8c724d4e891d02db6636a331', 'user_id': 42}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'fa563add8c724d4e891d02db6636a331', 'user_id': 42}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'fa563add8c724d4e891d02db6636a331', 'user_id': 42}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'fa563add8c724d4e891d02db6636a331', 'user_id': 42}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'fa563add8c724d4e891d02db6636a331', 'user_id': 42}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': 'fa563add8c724d4e891d02db6636a331', 'user_id': 42}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
____________________ Test05ReviewAPI.test_03_review_detail ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x06097450>
client = <django.test.client.Client object at 0x05E83670>
admin_client = <rest_framework.test.APIClient object at 0x05E83AF0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': '260f85d12b764c6db3cdc64614f69cd1', 'user_id': 43}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': '260f85d12b764c6db3cdc64614f69cd1', 'user_id': 43}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': '260f85d12b764c6db3cdc64614f69cd1', 'user_id': 43}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': '260f85d12b764c6db3cdc64614f69cd1', 'user_id': 43}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': '260f85d12b764c6db3cdc64614f69cd1', 'user_id': 43}
{'token_type': 'access', 'exp': 1663058403, 'iat': 1663058103, 'jti': '260f85d12b764c6db3cdc64614f69cd1', 'user_id': 43}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x058DC2D0>
client = <django.test.client.Client object at 0x057F05B0>
admin_client = <rest_framework.test.APIClient object at 0x05E5C9F0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': 'be49d2e2c8034a91b5ee9e38539f0fb7', 'user_id': 44}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': 'be49d2e2c8034a91b5ee9e38539f0fb7', 'user_id': 44}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': 'be49d2e2c8034a91b5ee9e38539f0fb7', 'user_id': 44}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': 'be49d2e2c8034a91b5ee9e38539f0fb7', 'user_id': 44}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': 'be49d2e2c8034a91b5ee9e38539f0fb7', 'user_id': 44}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': 'be49d2e2c8034a91b5ee9e38539f0fb7', 'user_id': 44}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
__________________ Test06CommentAPI.test_01_comment_not_auth __________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x060CB830>
client = <django.test.client.Client object at 0x05FEF590>
admin_client = <rest_framework.test.APIClient object at 0x05FEFBD0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests\test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '6f87103042244b688a3e2db0fa76d976', 'user_id': 45}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '6f87103042244b688a3e2db0fa76d976', 'user_id': 45}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '6f87103042244b688a3e2db0fa76d976', 'user_id': 45}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '6f87103042244b688a3e2db0fa76d976', 'user_id': 45}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '6f87103042244b688a3e2db0fa76d976', 'user_id': 45}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '6f87103042244b688a3e2db0fa76d976', 'user_id': 45}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05FADDF0>
admin_client = <rest_framework.test.APIClient object at 0x05FAD370>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests\test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '5d8b29bb7c6c4fe4be81cf918d820d96', 'user_id': 46}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '5d8b29bb7c6c4fe4be81cf918d820d96', 'user_id': 46}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '5d8b29bb7c6c4fe4be81cf918d820d96', 'user_id': 46}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '5d8b29bb7c6c4fe4be81cf918d820d96', 'user_id': 46}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '5d8b29bb7c6c4fe4be81cf918d820d96', 'user_id': 46}
{'token_type': 'access', 'exp': 1663058404, 'iat': 1663058104, 'jti': '5d8b29bb7c6c4fe4be81cf918d820d96', 'user_id': 46}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
___________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05FEE790>
client = <django.test.client.Client object at 0x05812250>
admin_client = <rest_framework.test.APIClient object at 0x05FEE410>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': '08bac292f6654fbcbef4344729bc495a', 'user_id': 47}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': '08bac292f6654fbcbef4344729bc495a', 'user_id': 47}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': '08bac292f6654fbcbef4344729bc495a', 'user_id': 47}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': '08bac292f6654fbcbef4344729bc495a', 'user_id': 47}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': '08bac292f6654fbcbef4344729bc495a', 'user_id': 47}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': '08bac292f6654fbcbef4344729bc495a', 'user_id': 47}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
______________ Test06CommentAPI.test_04_comment_check_permission ______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x05966350>
client = <django.test.client.Client object at 0x0577DDB0>
admin_client = <rest_framework.test.APIClient object at 0x0577D370>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests\test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
tests\common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests\common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
tests\common.py:68: in create_titles
    response = admin_client.post('/api/v1/titles/', data=data)
..\venv\lib\site-packages\rest_framework\test.py:296: in post
    path, data=data, format=format, content_type=content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:209: in post
    return self.generic('POST', path, data, content_type, **extra)
..\venv\lib\site-packages\rest_framework\test.py:234: in generic
    method, path, data, content_type, secure, **extra)
..\venv\lib\site-packages\django\test\client.py:422: in generic
    return self.request(**r)
..\venv\lib\site-packages\rest_framework\test.py:285: in request
    return super().request(**kwargs)
..\venv\lib\site-packages\rest_framework\test.py:237: in request
    request = super().request(**kwargs)
..\venv\lib\site-packages\django\test\client.py:503: in request
    raise exc_value
..\venv\lib\site-packages\django\core\handlers\exception.py:34: in inner
    response = get_response(request)
..\venv\lib\site-packages\django\core\handlers\base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
..\venv\lib\site-packages\django\core\handlers\base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
..\venv\lib\site-packages\django\views\decorators\csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
..\venv\lib\site-packages\rest_framework\viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\views.py:509: in dispatch
    response = self.handle_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
..\venv\lib\site-packages\rest_framework\views.py:480: in raise_uncaught_exception
    raise exc
..\venv\lib\site-packages\rest_framework\views.py:506: in dispatch
    response = handler(request, *args, **kwargs)
..\venv\lib\site-packages\rest_framework\mixins.py:20: in create
    headers = self.get_success_headers(serializer.data)
..\venv\lib\site-packages\rest_framework\serializers.py:549: in data
    return ReturnDict(ret, serializer=self)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = {}, args = (<Title: Поворот туда>,), kwargs = {}

    def __init__(self, *args, **kwargs):
        self.serializer = kwargs.pop('serializer')
>       super().__init__(*args, **kwargs)
E       TypeError: 'Title' object is not iterable

..\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py:18: TypeError
---------------------------- Captured stdout call -----------------------------
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': 'a3f3f7da9947454a9d2ff111cca39642', 'user_id': 48}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': 'a3f3f7da9947454a9d2ff111cca39642', 'user_id': 48}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': 'a3f3f7da9947454a9d2ff111cca39642', 'user_id': 48}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': 'a3f3f7da9947454a9d2ff111cca39642', 'user_id': 48}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': 'a3f3f7da9947454a9d2ff111cca39642', 'user_id': 48}
{'token_type': 'access', 'exp': 1663058405, 'iat': 1663058105, 'jti': 'a3f3f7da9947454a9d2ff111cca39642', 'user_id': 48}
------------------------------ Captured log call ------------------------------
ERROR    django.request:log.py:228 Internal Server Error: /api/v1/titles/
Traceback (most recent call last):
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\exception.py", line 34, in inner
    response = get_response(request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\core\handlers\base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\django\views\decorators\csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 480, in raise_uncaught_exception
    raise exc
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\views.py", line 506, in dispatch
    response = handler(request, *args, **kwargs)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\mixins.py", line 20, in create
    headers = self.get_success_headers(serializer.data)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\serializers.py", line 549, in data
    return ReturnDict(ret, serializer=self)
  File "e:\dev\s_10_project\venv\lib\site-packages\rest_framework\utils\serializer_helpers.py", line 18, in __init__
    super().__init__(*args, **kwargs)
TypeError: 'Title' object is not iterable
-------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
============================== warnings summary ===============================
..\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:943
  e:\dev\s_10_project\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:943: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    collections.MutableMapping.register(ParseResults)

..\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:3226
  e:\dev\s_10_project\venv\lib\site-packages\pkg_resources\_vendor\pyparsing.py:3226: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
    elif isinstance( exprs, collections.Iterable ):

tests/test_00_user_registration.py: 1 warning
tests/test_01_users.py: 12 warnings
tests/test_02_category.py: 13 warnings
tests/test_03_genre.py: 15 warnings
tests/test_04_title.py: 19 warnings
tests/test_05_review.py: 24 warnings
tests/test_06_comment.py: 24 warnings
  e:\dev\s_10_project\venv\lib\site-packages\jwt\api_jwt.py:81: DeprecationWarning: It is strongly recommended that you pass in a value for the "algorithms" argument when calling decode(). This argument will be mandatory in a future version.
    DeprecationWarning

tests/test_00_user_registration.py: 1 warning
tests/test_01_users.py: 12 warnings
tests/test_02_category.py: 13 warnings
tests/test_03_genre.py: 15 warnings
tests/test_04_title.py: 19 warnings
tests/test_05_review.py: 24 warnings
tests/test_06_comment.py: 24 warnings
  e:\dev\s_10_project\venv\lib\site-packages\jwt\api_jws.py:145: DeprecationWarning: It is strongly recommended that you pass in a value for the "algorithms" argument when calling decode(). This argument will be mandatory in a future version.
    DeprecationWarning

tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
  e:\dev\s_10_project\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Category'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth
tests/test_03_genre.py::Test03GenreAPI::test_02_genre
  e:\dev\s_10_project\venv\lib\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'reviews.models.Genre'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

-- Docs: https://docs.pytest.org/en/stable/warnings.html
=========================== short test summary info ===========================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user
FAILED tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator
FAILED tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user
FAILED tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser
FAILED tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - us...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete - Assert...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user - As...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - TypeErro...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - TypeEr...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - Ty...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - TypeE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - Type...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - TypeErro...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ty...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
================ 43 failed, 10 passed, 222 warnings in 14.54s =================
